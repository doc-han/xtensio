{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A simple javascript framework for building browser extensions. It takes away all the tedious configurations away from you and lowers the barrier to extension development.</p> <p>Get started with xtensio</p>"},{"location":"getting-started/","title":"What is xtensio?","text":""},{"location":"getting-started/#what-is-xtensio","title":"What is xtensio?","text":"<p>xtensio (pronounced /\u025bk\u02c8t\u025bn.\u0283o\u028a/, like \"ex-TEN-see-oh\") is javascript framework for building browser extensions. It leverages React.js to provide a well-organized folder structure that supports a declarative approach, simplifying and accelerating extension development.</p>"},{"location":"getting-started/#how-does-it-work","title":"How does it work?","text":"<p>xtensio provides you with a folder structure that comes with configurations already baked in. Hence, no configuration is needed to get started with your new extension project. Currently, it mainly supports React for development.</p>"},{"location":"installation/","title":"Installation","text":"<p>System Requirements:</p> <ul> <li>Node.js 20.x or later.</li> </ul>"},{"location":"installation/#creating-a-new-project","title":"Creating a new project","text":"<p>To create a new extension project using xtensio, we recommend using the create-xtensio-app utility, which sets up everything for you. To create a project, run:</p>  YARN NPM &gt; Terminal<pre><code>yarn create xtensio-app\n</code></pre> &gt; Terminal<pre><code>npx create-xtensio-app\n</code></pre> <p>On installation you'll see the following prompts.</p> &gt; Terminal<pre><code>\u2714 What's the name of your project? \u2026 app-name\n\u2714 Choose preferred package manager \u2026 npm / yarn\n\u2714 Do you want an src folder? \u2026 yes/no\n\u2714 Do you want to use Typescript? \u2026 yes/no\n\u2714 Do you want to use Tailwind Css? \u2026 yes/no\n</code></pre> <p>After a successful run of the prompts, a folder will be created your app-name and all required dependencies will be installed.</p> <p>If you're new to xtensio, see the project structure docs for an overview of all the possible files and folders in your application.</p>"},{"location":"project-structure/","title":"Xtensio Project Structure","text":"<p>This page provides an overview of the project structure of an Xtensio application. It covers top-level folders, files and configuration files.</p>"},{"location":"project-structure/#top-level-folders","title":"Top level folders","text":"Folder name Description <code>popup</code> This controls the view that is rendered when you click on an extension icon <code>contents</code> Allows users to manipulate the content and functionality of a websites \u2764\ufe0f <code>pages</code> This folder allows you to create webpages that are hosted within extension. <code>background</code> In charge of heavy computations and also the use of most browser API's for extensions <code>public</code> For managing static assets like images, icons and others"},{"location":"guide/","title":"Index","text":"<p>welcome</p>"},{"location":"guide/changing-extension-icon/","title":"Changing Extension Icons","text":"<p>To change icons for your extension. You just need to have them in the <code>public</code> directory and then import them into your <code>manifest.js</code> file.</p> <p>How to import extension icons of several dimensions</p> manifest.js<pre><code>import packageJson from \"./package.json\";\nimport icon16 from \"@public/icons/icon16.png\";\nimport icon32 from \"@public/icons/icon32.png\";\nimport icon48 from \"@public/icons/icon48.png\";\nimport icon128 from \"@public/icons/icon128.png\";\n\nexport default {\n  name: \"simple-extension\", // extension name\n  manifest_version: 3,\n  version: packageJson.version,\n  icons: {\n    16: icon16,\n    32: icon32,\n    48: icon48,\n    128: icon128,\n  },\n};\n</code></pre> <p>And that's it! your extension icons have been updated.</p>"},{"location":"guide/creating-an-extension-popup/","title":"Creating an Extension Popup","text":"<p>The extension popup is the small UI that shows up when you click an extension icon. see what it looks like</p> <p>Inside the popup folder is a file  <code>popup.jsx</code> (or  <code>popup.tsx</code> depending on what you're using) which exports a React component. This is the single entry point for your extension popup.</p>  Javascript Typescript /popup/popup.jsx<pre><code>const PopupPage = () =&gt; {\n  return &lt;div&gt;This is the extension popup&lt;/div&gt;;\n};\n\nexport default PopupPage;\n</code></pre> /popup/popup.tsx<pre><code>const PopupPage: React.FC = () =&gt; {\n  return &lt;div&gt;This is the extension popup&lt;/div&gt;;\n};\n\nexport default PopupPage;\n</code></pre> <p>There's no limit to what you can do here. you can import other components and do awesome stuff.</p>"},{"location":"guide/creating-an-extension-popup/#what-does-it-look-like","title":"What does it look like?","text":"<p>like this!</p> A browser extension popup"},{"location":"guide/creating-extension-pages/","title":"Creating extension pages","text":""},{"location":"guide/creating-extension-pages/#what-are-extension-pages","title":"What are Extension Pages?","text":"<p>Think of extension pages as webpages that are hosted by your extension. Hence, these pages are only available once a user has your extension installed.</p>"},{"location":"guide/creating-extension-pages/#what-are-they-for","title":"What are they for?","text":"<p>Extension Pages can be used to create configuration or settings pages, Terms of Service pages, and similar things you'll like to dedicate a page for.</p>"},{"location":"guide/creating-extension-pages/#how-to-create-an-extension-page","title":"How to create an Extension Page","text":"<ol> <li>Create a <code>.jsx</code> or <code>.tsx</code> file in the <code>pages</code> directory.</li> <li>Write a React component</li> <li>Export this component as the default export</li> </ol> <p>An example settings page</p>  Javascript Typescript /pages/settings.jsx<pre><code>import { useState } from \"react\"\n\nconst SettingsPage = () =&gt; {\n  const [theme, setTheme] = useState(\"light\");\n\n  const themeChangeHandler = (e)=&gt; {\n    setTheme(e.target.name);\n  }\n\n  return &lt;&gt;\n    &lt;div&gt;Select theme:&lt;/div&gt;\n    &lt;input value={theme} type=\"radio\" name=\"light\" onChange={themeChangeHandler} /&gt;\n    &lt;input value={theme} type=\"radio\" name=\"dark\" onChange={themeChangeHandler} /&gt;\n  &lt;/&gt;\n};\n\n// default export a react component to have a page\nexport default SettingsPage;\n</code></pre> /pages/settings.tsx<pre><code>import { useState } from \"react\"\n\nconst SettingsPage: React.FC = () =&gt; {\n  const [theme, setTheme] = useState(\"light\");\n\n  const themeChangeHandler = (e: React.ChangeEvent&lt;HTMLInputElement&gt;)=&gt; {\n    setTheme(e.target.name);\n  }\n\n  return &lt;&gt;\n    &lt;div&gt;Select theme:&lt;/div&gt;\n    &lt;input value={theme} type=\"radio\" name=\"light\" onChange={themeChangeHandler} /&gt;\n    &lt;input value={theme} type=\"radio\" name=\"dark\" onChange={themeChangeHandler} /&gt;\n  &lt;/&gt;\n};\n\n// default export a react component to have a page\nexport default SettingsPage;\n</code></pre>"},{"location":"guide/creating-extension-pages/#how-to-navigate-to-an-extension-page","title":"How to navigate to an Extension Page","text":"<p>After creating an extension page, you should be able to navigate to it from anywhere in the extension. xtensio provides a utility function <code>visitPage</code> for that.</p> <p>To visit a page, just call <code>visitPage</code> with the name of the page without the file extension.</p> <p>How to visit a page that was created at <code>/pages/settings.tsx</code></p> somewhere-in-your-extension<pre><code>import { visitPage } from \"xtensio\"\n...\nvisitPage(\"settings\");\n...\n</code></pre> <p>That's all you need to navigate to an Extension Page you've created in your extension.</p>"},{"location":"guide/environment-variables/","title":"Environment variables","text":"<p>Xtensio does support environment variables out of the box.</p> <p>Create any of the below env files at the root of your project and keep some environment variables in them.</p> Type Filename Description Global <code>.env</code> used for both development and production builds Development <code>.dev.env</code> <code>.development.env</code> used for only development Production <code>.prod.env</code> <code>.production.env</code> used for only production builds <p>Hence, you can have the development version of a variable in <code>.dev.env</code> and the production version of it in <code>.prod.env</code> and xtensio will know what to use when.</p> <p>Note: Development is when you run <code>yarn dev</code> or <code>npm run dev</code> and Production is when you run <code>yarn build</code> or <code>npm run build</code></p>"},{"location":"guide/managing-background-processes/","title":"Managing Background Processes","text":"<p>Inside the background folder is an <code>index.ts</code> or <code>index.js</code> file which serves as your single entry point for your extension's service worker or background script.</p> <p>You can freely create other files in the background directory and use them or import them into the <code>index.ts</code> file.</p>"},{"location":"guide/manipulating-a-website/","title":"Manipulating a website \u2764\ufe0f","text":"<p>This is the heart \u2764\ufe0f of browser extension development where most of the real magic happens.</p> <p>The primary goal of a browser extension is to change the user experience of website or to supercharge the browser. This could mean changing the looks or adding some functionalities to websites. This type of manipulation is handled by content files in xtensio.</p>"},{"location":"guide/manipulating-a-website/#how-to-use-contents-in-xtensio","title":"How to use contents in xtensio","text":"<p>Every content file has two parts.</p> Part What it does <code>config</code> Defines where &amp; how a specific code should be executed <code>code</code> Some code that is to be executed when conditions in config are met"},{"location":"guide/manipulating-a-website/#how-to-define-a-content-config","title":"How to define a content config","text":"<p>A content config is defined as an exported function with the name <code>getConfig</code> that returns an object.</p> <p>Below is an an example content config that runs only on google.com domains</p>  Javascript Typescript /contents/google.jsx<pre><code>export function getConfig() {\n    return {\n        matches: [\"*://*.google.com/*\"],\n    };\n}\n</code></pre> /contents/google.tsx<pre><code>import { ContentConfig } from \"xtensio\"\n\nexport function getConfig(): ContentConfig {\n    return {\n        matches: [\"*://*.google.com/*\"],\n    };\n}\n</code></pre>"},{"location":"guide/manipulating-a-website/#how-to-define-code","title":"How to define code","text":"<p>The code to be executed when a content config is matched can be any form of javascript. DOM manipulation, or any kind of web acceptable javascript/typescript.</p> <p>Below is an example content file that print \"This is google\" whenever you're on google.</p>  Javascript Typescript /contents/google.jsx<pre><code>export function getConfig() {\n    return {\n        matches: [\"*://*.google.com/*\"],\n    };\n}\n\nconsole.log(\"This is google\")\n// you can have complex scripts here. even DOM manipulation\n</code></pre> /contents/google.tsx<pre><code>import { ContentConfig } from \"xtensio\"\n\nexport function getConfig(): ContentConfig {\n    return {\n        matches: [\"*://*.google.com/*\"],\n    };\n}\n\nconsole.log(\"This is google\")\n// you can have complex scripts here. even DOM manipulation\n</code></pre>"},{"location":"guide/manipulating-a-website/#mounting-ui-into-websites-using-react","title":"Mounting UI into websites using React","text":"<p>With the use of React.js you can mount React components on any website by just making the component the default export in the content file.</p> <p>An example content file that mounts UI into amazon.com using React</p>  Javascript Typescript /contents/amazon.jsx<pre><code>import { useState } from \"react\"\n\nexport function getConfig() {\n    return {\n        matches: [\"*://*.amazon.com/*\"],\n    };\n}\n\nconst SomeComponent = () =&gt; {\n    const [count, setCount] = useState(0);\n    return &lt;div onClick={()=&gt; setCount(count+1)}&gt;click to change {count}&lt;/div&gt;\n}\n\nexport default SomeComponent;\n</code></pre> /contents/amazon.tsx<pre><code>import { useState } from \"react\"\nimport { ContentConfig } from \"xtensio\"\n\nexport function getConfig(): ContentConfig {\n    return {\n        matches: [\"*://*.amazon.com/*\"],\n    };\n}\n\nconst SomeComponent: React.FC = () =&gt; {\n    const [count, setCount] = useState(0);\n    return &lt;div onClick={()=&gt; setCount(count+1)}&gt;click to change {count}&lt;/div&gt;\n}\n\nexport default SomeComponent;\n</code></pre> <p>You can now build awesome extensions that manipulate websites and provide tailored experiences for users \u2764\ufe0f.</p>"},{"location":"guide/styling-extension-with-css/","title":"Stying with CSS","text":"<p>Xtensio supports multiple ways of handling CSS, including:</p> <ol> <li>CSS/SCSS modules</li> <li>Global CSS</li> </ol>"},{"location":"guide/styling-extension-with-css/#cssscss-modules","title":"CSS/SCSS modules","text":"<p>Xtensio has built-in support for CSS/CSS Modules using the <code>.module.(s)css</code> extension.</p> <p>CSS Modules scope CSS locally by generating unique class names, allowing the same class names in different files without conflicts\u2014ideal for component-level styling.</p> <p>Example using css modules in a popup</p>  Javascript Typescript <p>/popup/popup.jsx<pre><code>import styles from './popup.module.css'\n\nconst PopupPage = () =&gt; {\n  return &lt;div className={styles.hugeText}&gt;This is the extension popup&lt;/div&gt;;\n};\n\nexport default PopupPage;\n</code></pre> /popup/popup.module.css<pre><code>.hugeText {\n    font-size: 32px;\n}\n</code></pre></p> <p>/popup/popup.tsx<pre><code>import styles from './popup.module.css'\n\nconst PopupPage: React.FC = () =&gt; {\n  return &lt;div className={styles.hugeText}&gt;This is the extension popup&lt;/div&gt;;\n};\n\nexport default PopupPage;\n</code></pre> /popup/popup.module.css<pre><code>.hugeText {\n    font-size: 32px;\n}\n</code></pre></p>"},{"location":"guide/styling-extension-with-css/#global-css","title":"Global CSS","text":"<p>Any <code>.css</code> file imported at any location of the project is currently treated as global CSS.</p> <p>Example way of using global css</p> <pre><code>import \"./some-css-file.css\";\n// ...\n</code></pre> <p>And that' it! you've included some global CSS to your project</p>"},{"location":"guide/styling-extension-with-tailwind/","title":"Styling with Tailwind CSS","text":"<p>To include tailwind class utilities, you basically need to Opt in <code>[ select 'Yes' ]</code> for Tailwind Css in the setup process. We will do the all the heavy lifting and that's it! you can start using tailwind utility classes in any section being page,content, popup etc.</p> &gt; Terminal<pre><code>\u2714 What's the name of your project? \u2026 app-name\n\u2714 Choose preferred package manager \u2026 npm / yarn\n\u2714 Do you want an src folder? \u2026 yes/no\n\u2714 Do you want to use Typescript? \u2026 yes/no\n\u2714 Do you want to use Tailwind Css? \u2026 yes\n</code></pre> <p>An example use of Tailwind in popup</p>  Javascript Typescript /popup/popup.jsx<pre><code>const PopupPage = () =&gt; {\n  return &lt;div\n            className=\"px-10 py-1 bg-red-200 border ...\"&gt;\n         This is the extension popup\n         &lt;/div&gt;;\n};\n\nexport default PopupPage;\n</code></pre> /popup/popup.tsx<pre><code>const PopupPage: React.FC = () =&gt; {\n  return &lt;div\n            className=\"px-10 py-1 bg-red-200 border ...\"&gt;\n         This is the extension popup\n         &lt;/div&gt;;\n};\n\nexport default PopupPage;\n</code></pre>"},{"location":"guide/styling-extension-with-tailwind/#setting-up-tailwind-for-already-existing-projects","title":"Setting up Tailwind for already existing Projects.","text":"<p>coming soon.</p>"},{"location":"guide/the-extension-manifest/","title":"The Manifest file","text":"<p>This is where you put most of your extension configurations, permissions and so on.</p>  Javascript Typescript manifest.js<pre><code>import packageJson from \"./package.json\"\nimport icon from \"@public/icons/icon.png\"\n\nexport default {\n    name: \"simple-extension\", // extension name\n    manifest_version: 3,\n    version: packageJson.version,\n    icons: {\n        16: icon,\n        32: icon,\n        48: icon,\n        128: icon\n    }\n    // extend manifest by adding other config here\n}\n</code></pre> manifest.ts<pre><code>import packageJson from \"./package.json\"\nimport icon from \"@public/icons/icon.png\"\n\nexport default {\n    name: \"simple-extension\", // extension name\n    manifest_version: 3,\n    version: packageJson.version,\n    icons: {\n        16: icon,\n        32: icon,\n        48: icon,\n        128: icon\n    }\n    // extend manifest by adding other config here\n} as chrome.runtime.Manifest\n</code></pre> <p>Even though this configuration can be extended, some parts of it may be overwritten by xtensio. Mainly the <code>content_scripts</code> <code>background</code> and <code>action</code>.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Learn to build browser extensions with Xtensio through hands-on examples</p>"}]}